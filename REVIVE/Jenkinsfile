pipeline {
    agent any

    environment {
		DOCKERHUB_CREDENTIALS=credentials('dockerhub')
	}


    stages {

        stage('Login') {

			steps {
				sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
			}
		}

       //stage('Test golang') {
	   //  agent {
       //    docker {
       //      image 'golang:1.20.1'
       //      args '-u 0:0'
       //    }
       //   }
       //    steps {
       //        sh '''
       //    cd $WORKSPACE/REVIVE/src/catalog/
       //    go test
       //        '''
       //    }
       //}
//
       //stage('Test maven-cart') {
	   // agent {
       //    docker {
       //      image 'maven:3.8.7-openjdk-18'
       //    }
       //   }
       //    steps {
       //        sh '''
       //    cd $WORKSPACE/REVIVE/src/cart/
       //    mvn  test  -Dmaven.test.skip=true --quiet
       //        '''
       //    }
       //}       
//
       //stage('Test maven-orders') {
	   //  agent {
       //    docker {
       //      image 'maven:3.8.7-openjdk-18'
       //    }
       //   }
       //    steps {
       //        sh '''
       //    cd $WORKSPACE/REVIVE/src/orders/
       //    mvn   test -Dmaven.test.skip=true --quiet 
       //        '''
       //    }
       // }
//
       // stage('Test maven-ui') {
	   //     agent {
       //         docker {
       //             image 'maven:3.8.7-openjdk-18'
       //         }
       //     }
       //     steps {
       //       sh '''
       //         cd $WORKSPACE/REVIVE/src/ui/
       //         mvn  test -Dmaven.test.skip=true --quiet 
       //         '''
       //     }
       // }
      //
       //stage('Test maven-node') {
	   //  agent {
       //    docker {
       //      image 'node'
       //      args '-u 0:0'
       //    }
       //   }
       //    steps {
       //        sh '''
       //    cd $WORKSPACE/REVIVE/src/checkout/
       //    npm install
       //   
       //        '''
       //    }
       // }
//
       // stage('SonarQube analysis') {
       //         agent {
       //             docker {
       //               image 'sonarsource/sonar-scanner-cli:4.8.0'
       //             }
       //            }
       //            environment {
       //     CI = 'true'
       //     scannerHome='/opt/sonar-scanner'
       // }
       //         steps{
       //             withSonarQubeEnv('sonar') {
       //                 sh "${scannerHome}/bin/sonar-scanner"
       //             }
       //         }
       //     }
       // stage("Quality Gate") {
       //         steps {
       //           timeout(time: 1, unit: 'HOURS') {
       //             waitForQualityGate abortPipeline: true
       //           }
       //         }
       //       }  
//
       // stage('Build golang') {
	   //   agent {
       //     docker {
       //       image 'golang'
       //       args '-u 0:0'
       //     }
       //    }
       //     steps {
       //         sh '''
       //     cd $WORKSPACE/REVIVE/src/catalog/
       //     go build   -buildvcs=false
       //         '''
       //     }
       //  }
//
       // stage('Build maven-orders') {
	   //    agent {
       //      docker {
       //        image 'maven:3.8.7-openjdk-18'
       //      }
       //     }
       //      steps {
       //          sh '''
       //      cd $WORKSPACE/REVIVE/src/orders/
       //      mvn  package -Dmaven.test.skip=true --quiet 
       //          '''
       //      }
       //  } 

        //stage('Build checkout') {
        //    agent {
        //        docker {
        //            image 'node' 
        //            args '-u 0:0' 
        //        }
        //    }
        //    steps {
        //        dir("${WORKSPACE}/REVIVE/src/checkout/") {
        //    
        //        sh '''
        //        npm install
        //        npm run build
        //        '''
        //        }
        //    }
        //}

        stage('Build-images-ui') {
                steps {
                    sh '''
                    cd $WORKSPACE/REVIVE/src/ui
                    docker build -t sahar5470/revive/ui:jenkins-${BUILD_NUMBER} .
                    '''
                }
        }
        stage('Build-images-catalog') {
              steps {
                  sh '''
                    cd $WORKSPACE/REVIVE/src/catalog
                    docker build -t sahar5470/revive/catalog:jenkins-${BUILD_NUMBER} .
                    docker build -t sahar5470/revive/catalog-mysql:jenkins-${BUILD_NUMBER} -f Dockerfile-mysql .
                  '''
              }
        }
        stage('Build-images-cart') {
            steps {
                sh '''
                  cd $WORKSPACE/REVIVE/src/cart
                  docker build -t sahar5470/revive/carts:jenkins-${BUILD_NUMBER} .
                  docker build -t sahar5470/revive/carts-dynamodb:jenkins-${BUILD_NUMBER} -f Dockerfile-dynamodb .
                '''
            }
        }
        stage('Build-images-orders') {
            steps {
                sh '''
                  cd $WORKSPACE/REVIVE/src/orders
                  docker build -t sahar5470/revive/orders:jenkins-${BUILD_NUMBER} .
                  docker build -t sahar5470/revive/orders-mysql:jenkins-${BUILD_NUMBER} -f Dockerfile-mysql .
                  docker build -t sahar5470/revive/orders-rabbitmq:jenkins-${BUILD_NUMBER} -f Dockerfile-rabbitmq .                  
                '''
            }
        }
        stage('Build-images-checkout') {
            steps {
                sh '''
                cd $WORKSPACE/REVIVE/src/checkout
                docker build -t sahar5470/revive/checkout:jenkins-${BUILD_NUMBER} .
                docker build -t sahar5470/revive/checkout-db:jenkins-${BUILD_NUMBER} -f Dockerfile-db .
                '''
            }
        }
        stage('Build-images-assets') {
            steps {
                sh '''
                  cd $WORKSPACE/REVIVE/src/assets
                  docker build -t sahar5470/revive/asset:jenkins-${BUILD_NUMBER} .
                  '''
            }
        }  

        stage('Push-images-ui') {
                steps {
                    sh '''
                    docker push sahar5470/revive/ui:jenkins-${BUILD_NUMBER}
                    '''
                }
        }  

        stage('Push-images-catalog') {
              steps {
                  sh '''
                    docker push sahar5470/revive/catalog:jenkins-${BUILD_NUMBER}
                    docker push sahar5470/revive/catalog-mysql:jenkins-${BUILD_NUMBER} -f Dockerfile-mysql
                  '''
              }
        }

        stage('Push-images-cart') {
            steps {
                sh '''
                  docker push sahar5470/revive/carts:jenkins-${BUILD_NUMBER}
                  docker push sahar5470/revive/carts-dynamodb:jenkins-${BUILD_NUMBER} -f Dockerfile-dynamodb
                '''
            }
        }

        stage('Push-images-orders') {
            steps {
                sh '''
                  docker push sahar5470/revive/orders:jenkins-${BUILD_NUMBER}
                  docker push sahar5470/revive/orders-mysql:jenkins-${BUILD_NUMBER} -f Dockerfile-mysql
                  docker push sahar5470/revive/orders-rabbitmq:jenkins-${BUILD_NUMBER} -f Dockerfile-rabbitmq                  
                '''
            }
        }

        stage('Push-images-checkout') {
            steps {
                sh '''
                docker push sahar5470/revive/checkout:jenkins-${BUILD_NUMBER}
                docker push sahar5470/revive/checkout-db:jenkins-${BUILD_NUMBER} -f Dockerfile-db
                '''
            }
        }

        stage('Push-images-assets') {
            steps {
                sh '''
                docker push sahar5470/revive/asset:jenkins-${BUILD_NUMBER}
                  '''
            }
        }
   
        
    }

    post {
        success {
            slackSend color: '#2EB67D',
            channel: 'dev-alerts', 
            message: "Revive Project Build Status" +
            "\n Project Name: Revive" +
            "\n Job Name: ${env.JOB_NAME}" +
            "\n Build number: ${currentBuild.displayName}" +
            "\n Build Status : SUCCESS" +
            "\n Build url : ${env.BUILD_URL}"
        }
        failure {
            slackSend color: '#E01E5A',
            channel: 'dev-alerts',  
            message: "Revive Project Build Status" +
            "\n Project Name: Revive" +
            "\n Job Name: ${env.JOB_NAME}" +
            "\n Build number: ${currentBuild.displayName}" +
            "\n Build Status : FAILED" +
            "\n Build User : Sahar" +
            "\n Action : Please check the console output to fix this job IMMEDIATELY" +
            "\n Build url : ${env.BUILD_URL}"
        }
        unstable {
            slackSend color: '#ECB22E',
            channel: 'dev-alerts', 
            message: "Revive Project Build Status" +
            "\n Project Name: Revive" +
            "\n Job Name: ${env.JOB_NAME}" +
            "\n Build number: ${currentBuild.displayName}" +
            "\n Build Status : UNSTABLE" +
            "\n Action : Please check the console output to fix this job IMMEDIATELY" +
            "\n Build url : ${env.BUILD_URL}"
        }   
    }
       
}

